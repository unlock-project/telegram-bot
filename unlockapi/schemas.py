# generated by datamodel-codegen:
#   filename:  back.api.yaml
#   timestamp: 2023-07-18T17:18:08+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field, constr


class UserSchema(BaseModel):
    id: Optional[int] = Field(..., title='ID')
    first_name: Optional[constr(max_length=150)] = Field(..., title='First Name')
    last_name: Optional[constr(max_length=150)] = Field(..., title='Last Name')
    qr: Optional[constr(max_length=100)] = Field(..., title='Qr')
    team: Optional[int] = Field(..., title='Team')


class BotRegisterSchema(BaseModel):
    username: Optional[str] = Field(..., title='Username')


class TeamSchema(BaseModel):
    name: constr(max_length=100) = Field(..., title='Name')
    balance: Optional[int] = Field(..., title='Balance')
    tutor: Optional[int] = Field(..., title='Tutor')


class EventSchema(BaseModel):
    title: Optional[str] = Field(..., title='Title')
    date: Optional[str] = Field(..., title='Date')
    time: Optional[str] = Field(..., title='Time')


class PromoSchema(BaseModel):
    code: Optional[str] = Field(..., title='Code')
    expiration_date: Optional[str] = Field(..., title='Expiration Date')
    expiration_time: Optional[str] = Field(..., title='Expiration Time')
    message: Optional[str] = Field(..., title='Message')


class PromoBotSchema(BaseModel):
    code: Optional[str] = Field(..., title='Code')
    user_id: Optional[int] = Field(..., title='User Id')
    time: Optional[str] = Field(..., title='Time')


class MessageSchema(BaseModel):
    message: Optional[str] = Field(..., title='Message')


class AnswerBotSchema(BaseModel):
    question_id: Optional[int] = Field(..., title='Question Id')
    user_id: Optional[int] = Field(..., title='User Id')
    answer: Optional[str] = Field(..., title='Answer')


class RegistrationSchema(BaseModel):
    option_id: Optional[int] = Field(..., title='Option Id')
    text: Optional[str] = Field(..., title='Text')
    message: Optional[str] = Field(..., title='Message')


class OptionBotSchema(BaseModel):
    vote_id: Optional[int] = Field(..., title='Vote Id')
    user_id: Optional[int] = Field(..., title='User Id')
    option_id: Optional[int] = Field(..., title='Option Id')


class ChoiceBotSchema(BaseModel):
    vote_id: Optional[int] = Field(..., title='Vote Id')
    user_id: Optional[int] = Field(..., title='User Id')
    option_id: Optional[int] = Field(..., title='Option Id')
